name: CI

on:
  push:
    branches: [main]

env:
  # SKIP_ENV_VALIDATION: 1
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOKPLOY_URL: ${{ secrets.DOKPLOY_URL }}
  DOKPLOY_TOKEN: ${{ secrets.DOKPLOY_TOKEN }}
  DOKPLOY_APP: ${{ secrets.DOKPLOY_APP }}

jobs:
  build-and-push-image-and-deploy:
    runs-on: ubuntu-latest

    # strategy:
    #   matrix:
    #     node-version: [20]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # - name: Install pnpm
      #   uses: pnpm/action-setup@v2
      #   with:
      #     version: 8
      #     run_install: false

      # - name: Install Node.js ${{ matrix.node-version }}
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: ${{ matrix.node-version }}
      #     cache: 'pnpm'

      # - name: Get pnpm store directory
      #   shell: bash
      #   run: |
      #     echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      # - name: Setup pnpm cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ env.STORE_PATH }}
      #     key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pnpm-store-

      # - name: Install dependencies
      #   run: pnpm install

      # - name: Typecheck
      #   run: pnpm typecheck

      # - name: Lint
      #   run: pnpm lint

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy
        run: |
          curl -X 'POST' \
            '${{ env.DOKPLOY_URL }}/api/application.deploy' \
            -H 'accept: application/json' \
            -H 'Content-Type: application/json' \
            -H 'Authorization: Bearer ${{ env.DOKPLOY_TOKEN }}' \
            -d '{
              "applicationId": ${{ env.DOKPLOY_APP }},
            }'
