generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fieldReference"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id         String        @id @default(uuid())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  email      String        @unique
  sub        String        @unique
  givenName  String
  familyName String
  name       String
  nickname   String
  picture    String
  groups     UserGroup[]
  expenses   Expense[]
  debts      ExpenseDebt[]
  recipes    Recipe[]
}

model Group {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      String
  adminId   String
  members   UserGroup[]
  expenses  Expense[]
  tasks     Task[]
}

model UserGroup {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  @@id([userId, groupId])
}

model ExpenseDebt {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount    String
  settled   String   @default("0.00")
  expense   Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  expenseId String
  debtor    User     @relation(fields: [debtorId], references: [id])
  debtorId  String
}

model Expense {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  name      String
  payer     User          @relation(fields: [payerId], references: [id])
  payerId   String
  amount    String
  debts     ExpenseDebt[]
  group     Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
}

model Task {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
}

model RecipeIngredient {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  amount    Int
  unit      String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  String
}

model RecipeStep {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  String
}

model Recipe {
  id          String             @id @default(uuid())
  slug        String             @unique
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  name        String
  ingredients RecipeIngredient[]
  steps       RecipeStep[]
  author      User               @relation(fields: [authorId], references: [id])
  authorId    String
}
