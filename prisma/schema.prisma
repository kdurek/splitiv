// https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fieldReference"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Group {
    id        String      @id @default(cuid())
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    name      String
    adminId   String
    members   UserGroup[]
    expenses  Expense[]
    tasks     Task[]
}

model UserGroup {
    user    User   @relation(fields: [userId], references: [id])
    userId  String
    group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId String

    @@id([userId, groupId])
}

model ExpenseDebt {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    amount    Decimal
    settled   Decimal  @default(0)
    expense   Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
    expenseId String
    debtor    User     @relation(fields: [debtorId], references: [id])
    debtorId  String
}

model Expense {
    id          String        @id @default(cuid())
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    name        String
    description String?
    payer       User          @relation(fields: [payerId], references: [id])
    payerId     String
    amount      Decimal
    debts       ExpenseDebt[]
    group       Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId     String
}

model Task {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId   String
}

model RecipeIngredient {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    amount    Int
    unit      String
    recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId  String
}

model RecipeStep {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId  String
}

model Recipe {
    id          String             @id @default(cuid())
    slug        String             @unique
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt
    name        String
    ingredients RecipeIngredient[]
    steps       RecipeStep[]
    author      User               @relation(fields: [authorId], references: [id])
    authorId    String
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    groups        UserGroup[]
    expenses      Expense[]
    debts         ExpenseDebt[]
    recipes       Recipe[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
