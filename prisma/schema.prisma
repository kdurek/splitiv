// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider                  = "zod-prisma-types"
  createRelationValuesTypes = true
}

model Group {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      String
  adminId   String
  members   UserGroup[]
  expenses  Expense[]
}

model UserGroup {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  @@id([userId, groupId])
}

model ExpenseLog {
  id        String      @id @default(cuid())
  amount    Decimal
  debt      ExpenseDebt @relation(fields: [debtId], references: [id], onDelete: Cascade)
  debtId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model ExpenseDebt {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  amount    Decimal
  settled   Decimal      @default(0)
  expense   Expense      @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  expenseId String
  debtor    User         @relation(fields: [debtorId], references: [id])
  debtorId  String
  logs      ExpenseLog[]
}

model Expense {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String
  description String?
  payer       User          @relation(fields: [payerId], references: [id])
  payerId     String
  amount      Decimal
  debts       ExpenseDebt[]
  group       Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String
}

model User {
  id                String             @id @default(cuid())
  googleId          String?            @unique
  name              String?
  firstName         String?
  lastName          String?
  email             String?            @unique
  password          String?
  image             String?
  activeGroupId     String?
  sessions          Session[]
  groups            UserGroup[]
  expenses          Expense[]
  debts             ExpenseDebt[]
  pushSubscriptions PushSubscription[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model PushSubscription {
  endpoint String @id
  p256dh   String
  auth     String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
}

model Session {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
}
